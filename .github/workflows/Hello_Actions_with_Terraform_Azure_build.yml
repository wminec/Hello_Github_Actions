name: Basic Azure Terraform Workflow

on:
    workflow_dispatch:
      inputs:
        terraform_operation:
          description: 'Terraform Operation: create_tfstate_storage, plan, apply, destory'
          required: true
          default: 'plan'
          type: choice
          options:
            - 'create_tfstate_storage'
            - 'plan'
            - 'apply'
            - 'destory'

    pull_request:
      branches: [ main ]
      paths:
          - 'Hello_Actions_with_Terraform_Azure/**'

permissions:
    id-token: write
    contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
    terraform:
        name: Build a debug version of the app
        runs-on: ubuntu-latest

        steps:
        - name: Code Checkout
          id: checkout
          uses: actions/checkout@v4

        - name: Azure Authentication
          id: login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#        - name: Run Azure CLI commands
#          run: |
#              az account show
#              az group list --output table
#              pwd
        
        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.7.5

        - name: Create Terraform tfstate Storage
          id: create_tfstate_storage
          if: ${{ github.event.inputs.terraform_operation == 'create_tfstate_storage' }}
          run: |
            cd create_tfstate_storage
            terraform init
            terraform apply -auto-approve
          working-directory: Hello_Actions_with_Terraform_Azure

#        - name: Create keyvault for tfstate
#          id: create_keyvault
#          if: ${{ github.event.inputs.terraform_operation == 'create_tfstate_storage' }}
#          run: |
#            ACCOUNT_KEY=$(az storage account keys list --resource-group tfstate --account-name tfstateaction --query '[0].value' -o tsv)
#            az keyvault create --name tfstate-githubactions --resource-group tfstate --location westus2
#            az keyvault secret set --vault-name tfstate-githubactions --name tfstate-key --value $ACCOUNT_KEY
#          working-directory: Hello_Actions_with_Terraform_Azure

#        - name: get keyvault secret
#          id: get_keyvault_secret
#          run: |
#            export ARM_ACCESS_KEY=$(az keyvault secret show --name tfstate-key --vault-name tfstate-githubactions --query value -o tsv)
#          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Terraform Init
          id: init
          run: |
            terraform init
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Install Checkov
          id: checkov
          if: github.event_name == 'pull_request'
          run: |
            pip install checkov
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Checkov Static Test
          id: static
          if: github.event_name == 'pull_request'
          run: |
            checkov --directory Hello_Actions_with_Terraform_Azure --download-external-modules true
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Terraform Format
          id: fmt
          run: |
            terraform fmt -check -recursive
          working-directory: Hello_Actions_with_Terraform_Azure
          continue-on-error: true

        - name: Terraform Validate
          id: validate
          run: |
            terraform validate -no-color
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Terraform Plan
          id: tplan
          if: ${{ github.event.inputs.terraform_operation == 'plan' }}
          # env:
          #   TF_VAR_secret: '${{ secrets.example_secret }}'
          run: |
            terraform plan -no-color
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Checkov Plan Test
          id: cplan
          if: github.event_name == 'pull_request'
          # env:
          #   TF_VAR_secret: '${{ secrets.example_secret }}'
          run: |
            terraform plan --out plan.tfplan
            terraform show -json plan.tfplan > tfplan.json
            ls
            checkov -f tfplan.json --framework terraform_plan

        - name: Pull Request Comment
          id: comment
          uses: actions/github-script@v3
          if: github.event_name == 'pull_request'
          env:
            TPLAN: "terraform\n${{ steps.tplan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GHTOKEN }}
            script: |
              const output = `
              ### Pull Request Information
              Please review this pull request. Merging the PR will run Terraform Apply with the plan detailed below.
    
              #### Terraform Checks
              Init: \`${{ steps.init.outcome }}\`
              Format: \`${{ steps.fmt.outcome }}\`
              Validation: \`${{ steps.validate.outcome }}\`
              Plan: \`${{ steps.tplan.outcome }}\`
    
              #### Checkov
              Static: \`${{ steps.static.outcome }}\`
              Plan: \`${{ steps.cplan.outcome }}\`
    
              <details><summary>Plan File</summary>
    
              \`\`\`${process.env.TPLAN}\`\`\`
    
              </details>
    
              `
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })


        - name: Terraform Apply
          id: apply
          if: ${{ github.event.inputs.terraform_operation == 'apply' }}
          # env:
          #   TF_VAR_domain_pass: '${{ secrets.DOMAIN_JOIN_PASS }}'
          #   TF_VAR_local_pass: '${{ secrets.LOCAL_ADMIN_PASS }}'
          #   TF_VAR_workspace_key: '${{ secrets.LA_WORKSPACE_KEY }}'
          run: |
            terraform apply -auto-approve
          working-directory: Hello_Actions_with_Terraform_Azure

        - name: Terraform Destroy
          id: destroy
          if: ${{ github.event.inputs.terraform_operation == 'destory' }}
          # env:
          #   TF_VAR_domain_pass: '${{ secrets.DOMAIN_JOIN_PASS }}'
          #   TF_VAR_local_pass: '${{ secrets.LOCAL_ADMIN_PASS }}'
          #   TF_VAR_workspace_key: '${{ secrets.LA_WORKSPACE_KEY }}'
          run: |
            terraform destroy -auto-approve
          working-directory: Hello_Actions_with_Terraform_Azure

          

